import socket
import ssl

# SecureNet Protocol Server
def snp_server():
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_cert_chain(certfile="server.crt", keyfile="server.key")

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:
        sock.bind(('0.0.0.0', 8443))
        sock.listen(5)
        with context.wrap_socket(sock, server_side=True) as ssock:
            print("Server listening on port 8443...")
            conn, addr = ssock.accept()
            print(f"Connection established with {addr}")
            data = conn.recv(1024)
            print(f"Received: {data.decode()}")
            conn.sendall(b"SecureNet Protocol Response")
            conn.close()

# SecureNet Protocol Client
def snp_client(server_ip):
    context = ssl.create_default_context()

    with socket.create_connection((server_ip, 8443)) as sock:
        with context.wrap_socket(sock, server_hostname=server_ip) as ssock:
            print(f"Client connected to {server_ip} on port 8443")
            ssock.sendall(b"SecureNet Protocol Request")
            data = ssock.recv(1024)
            print(f"Received: {data.decode()}")

if __name__ == "__main__":
    import sys
    if sys.argv[1] == "server":
        snp_server()
    elif sys.argv[1] == "client":
        snp_client(sys.argv[2])
